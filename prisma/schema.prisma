generator client {
  provider = "prisma-client-js"
  output   = "../src/generated/prisma"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// User roles in the system
enum UserRole {
  STARTUP
  INVESTOR
  MENTOR
  STUDENT
  ADMIN
}

enum SessionType {
  WEBINAR
  PANEL_DISCUSSION
  PRODUCT_DEMO
}

model User {
  id                 Int             @id @default(autoincrement())
  full_name          String
  email              String          @unique
  mobile             String?
  password_hash      String
  email_verified     Boolean         @default(false)
  otp                String?
  otp_expires_at     DateTime?
  reset_token        String?         @unique
  reset_token_expiry DateTime?
  is_verified        Boolean         @default(false)
  is_active          Boolean         @default(true)
  last_login         DateTime?
  created_at         DateTime        @default(now())
  updated_at         DateTime        @updatedAt
  role               UserRole        @default(STARTUP)
  startup_profile    StartupProfile?
  posts              Post[]
  likes              Like[]
  comments           Comment[]
  sessions           Session[]
  needs              Need[]
  notifications      Notification[]

  @@map("users")
}

model Post {
  id            Int            @id @default(autoincrement())
  user_id       Int
  author        User           @relation(fields: [user_id], references: [id], onDelete: Cascade)
  text          String
  images        String[]
  documents     String[]
  likes         Like[]
  comments      Comment[]
  notifications Notification[]
  published     Boolean        @default(false)
  created_at    DateTime       @default(now())
  updated_at    DateTime       @updatedAt

  @@map("posts")
}

model Like {
  id         Int      @id @default(autoincrement())
  user_id    Int
  post_id    Int
  user       User     @relation(fields: [user_id], references: [id], onDelete: Cascade)
  post       Post     @relation(fields: [post_id], references: [id], onDelete: Cascade)
  created_at DateTime @default(now())

  @@unique([user_id, post_id])
}

// Ensures a user can like a post only once
model Comment {
  id         Int      @id @default(autoincrement())
  user_id    Int
  post_id    Int
  content    String
  user       User     @relation(fields: [user_id], references: [id], onDelete: Cascade)
  post       Post     @relation(fields: [post_id], references: [id], onDelete: Cascade)
  created_at DateTime @default(now())
  updated_at DateTime @updatedAt
}

model StartupProfile {
  id                    Int                   @id @default(autoincrement())
  user_id               Int                   @unique
  is_complete           Boolean               @default(false)
  completion_percentage Int                   @default(0)
  created_at            DateTime              @default(now())
  updated_at            DateTime              @updatedAt
  business_details      BusinessDetails?
  company_details       CompanyDetails?
  innovation_focus      InnovationFocus?
  interests             Interests?
  offerings             Offerings?
  partnership_interests PartnershipInterests?
  personal_info         PersonalInfo?
  user                  User                  @relation(fields: [user_id], references: [id], onDelete: Cascade)
  technology_interests  TechnologyInterests?

  @@map("startup_profiles")
}

model PersonalInfo {
  id                 Int            @id @default(autoincrement())
  startup_profile_id Int            @unique
  profile_picture    String?
  first_name         String
  last_name          String
  email              String
  phone              String
  location           String
  website            String?
  birth_date         DateTime?
  bio                String?
  created_at         DateTime       @default(now())
  updated_at         DateTime       @updatedAt
  startup_profile    StartupProfile @relation(fields: [startup_profile_id], references: [id], onDelete: Cascade)

  @@map("personal_info")
}

model BusinessDetails {
  id                 Int            @id @default(autoincrement())
  startup_profile_id Int            @unique
  job_title          String
  company            String?
  industry           String
  experience         String?
  business_type      String?
  team_size          String?
  revenue            String?
  funding_stage      String?
  skills             String?
  goals              String?
  linkedin_profile   String?
  twitter_profile    String?
  github_profile     String?
  portfolio_website  String?
  created_at         DateTime       @default(now())
  updated_at         DateTime       @updatedAt
  startup_profile    StartupProfile @relation(fields: [startup_profile_id], references: [id], onDelete: Cascade)

  @@map("business_details")
}

model CompanyDetails {
  id                  Int            @id @default(autoincrement())
  startup_profile_id  Int            @unique
  company_logo        String?
  company_name        String
  founded_year        Int
  company_email       String
  company_phone       String
  company_location    String
  company_website     String?
  company_description String
  vision              String
  mission             String
  team_size           String?
  company_type        String?
  industry            String
  revenue_range       String?
  legal_name          String?
  tax_id              String?
  registration_date   DateTime?
  business_license    String?
  created_at          DateTime       @default(now())
  updated_at          DateTime       @updatedAt
  startup_profile     StartupProfile @relation(fields: [startup_profile_id], references: [id], onDelete: Cascade)

  @@map("company_details")
}

model Offerings {
  id                        Int            @id @default(autoincrement())
  startup_profile_id        Int            @unique
  products                  String[]       @default([])
  services                  String[]       @default([])
  pricing_model             String?
  target_market             String?
  revenue_streams           String[]       @default([])  
  partnerships              String[]       @default([])
  certifications            String[]       @default([])
  value_proposition         String?
  competitive_advantage     String?
  business_model            String?
  created_at                DateTime       @default(now())
  updated_at                DateTime       @updatedAt
  startup_profile           StartupProfile @relation(fields: [startup_profile_id], references: [id], onDelete: Cascade)

  @@map("offerings")
}

model Interests {
  id                     Int            @id @default(autoincrement())
  startup_profile_id     Int            @unique
  primary_industry       String
  secondary_industry     String?
  primary_target_market  String?
  geographic_focus       String?
  market_description     String?
  partnership_goals      String?
  innovation_description String?
  future_goals           String?
  created_at             DateTime       @default(now())
  updated_at             DateTime       @updatedAt
  startup_profile        StartupProfile @relation(fields: [startup_profile_id], references: [id], onDelete: Cascade)

  @@map("interests")
}

model TechnologyInterests {
  id                  Int            @id @default(autoincrement())
  startup_profile_id  Int            @unique
  ai_ml               Boolean        @default(false)
  blockchain          Boolean        @default(false)
  cloud_computing     Boolean        @default(false)
  cybersecurity       Boolean        @default(false)
  iot                 Boolean        @default(false)
  fintech             Boolean        @default(false)
  healthtech          Boolean        @default(false)
  edtech              Boolean        @default(false)
  sustainability_tech Boolean        @default(false)
  other_tech          String?
  created_at          DateTime       @default(now())
  updated_at          DateTime       @updatedAt
  startup_profile     StartupProfile @relation(fields: [startup_profile_id], references: [id], onDelete: Cascade)

  @@map("technology_interests")
}

model PartnershipInterests {
  id                       Int            @id @default(autoincrement())
  startup_profile_id       Int            @unique
  startup_partnerships     Boolean        @default(false)
  enterprise_partnerships  Boolean        @default(false)
  research_collaborations  Boolean        @default(false)
  academic_partnerships    Boolean        @default(false)
  government_contracts     Boolean        @default(false)
  nonprofit_collaborations Boolean        @default(false)
  created_at               DateTime       @default(now())
  updated_at               DateTime       @updatedAt
  startup_profile          StartupProfile @relation(fields: [startup_profile_id], references: [id], onDelete: Cascade)

  @@map("partnership_interests")
}

model InnovationFocus {
  id                        Int            @id @default(autoincrement())
  startup_profile_id        Int            @unique
  product_development       Boolean        @default(false)
  process_innovation        Boolean        @default(false)
  business_model_innovation Boolean        @default(false)
  sustainability_innovation Boolean        @default(false)
  social_impact             Boolean        @default(false)
  disruptive_technology     Boolean        @default(false)
  created_at                DateTime       @default(now())
  updated_at                DateTime       @updatedAt
  startup_profile           StartupProfile @relation(fields: [startup_profile_id], references: [id], onDelete: Cascade)

  @@map("innovation_focus")
}

model Session {
  id            Int            @id @default(autoincrement())
  type          SessionType
  title         String
  dateTime      DateTime
  duration      String
  notifications Notification[]

  // Common
  registrationLink String?

  // Webinar-specific
  audience     String[]
  description  String?
  speakerName  String?
  speakerEmail String?
  contactInfo  String?

  // Panel Discussion-specific
  panelistName         String?
  panelistDesignation  String?
  panelistBio          String?
  moderatorName        String?
  moderatorDesignation String?
  moderatorBio         String?

  // Product Demo-specific
  presenterName        String?
  presenterDesignation String?
  presenterAffiliation String?
  aboutCompany         String?
  aboutProduct         String?

  // Relation to User
  userId Int
  user   User @relation(fields: [userId], references: [id], onDelete: Cascade)

  created_at DateTime @default(now())
  updated_at DateTime @updatedAt
}

enum NeedType {
  LIVE_PROJECTS
  INTERNSHIP
  RESEARCH
  CSR_INITIATIVE
}

model Need {
  id            Int            @id @default(autoincrement())
  user_id       Int
  type          NeedType
  title         String
  description   String
  image_url     String?
  contact_info  Json // Stores email, phone as JSON
  details_json  Json // Stores all form-specific data as JSON
  location      String?
  duration      String?
  skills        String?
  compensation  String?
  is_published  Boolean        @default(true)
  created_at    DateTime       @default(now())
  updated_at    DateTime       @updatedAt
  notifications Notification[]

  // Relations
  user User @relation(fields: [user_id], references: [id], onDelete: Cascade)

  @@map("needs")
}

model Notification {
  id        Int      @id @default(autoincrement())
  userId    Int // The user who receives the notification
  message   String
  isRead    Boolean  @default(false)
  createdAt DateTime @default(now())

  // Optional links to specific content
  postId    Int?
  sessionId Int?
  needId    Int?

  // Relations
  user    User     @relation(fields: [userId], references: [id])
  post    Post?    @relation(fields: [postId], references: [id])
  session Session? @relation(fields: [sessionId], references: [id])
  need    Need?    @relation(fields: [needId], references: [id])

  @@index([userId, isRead])
  @@map("notifications")
}
